{"version":3,"sources":["webpack:///webpack/bootstrap 054ae4bd6d0a201e9f1d","webpack:///./src/pureMasonry.js"],"names":["brickContainer","mason","module","exports","init","options","document","querySelector","container","brickWidth","width","horizontalGutter","horizontal_gutter","verticalGutter","vertical_gutter","underConstruction","responsive","build","bricks","brickIndex","children","length","classNames","className","split","indexOf","style","push","grossWidth","bricksPerRow","Math","floor","parseInt","clientWidth","columnHeight","Array","fill","column","left","top","offsetHeight","minColumnValue","min","apply","minColumnKey","tmpValues","console","log","getBoundingClientRect","ind","computedHeight","item","max","height","window","onresize","widthBefore","waitingForResize","clearTimeout","setTimeout"],"mappings":"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","file":"pureMasonry.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 054ae4bd6d0a201e9f1d","let brickContainer;\nlet mason = {};\n\nmodule.exports = {\n  init: function(options){\n    brickContainer = document.querySelector(options.container);\n    mason = {\n      options: {\n        brickWidth: options.width,\n        horizontalGutter: options.horizontal_gutter,\n        verticalGutter: options.vertical_gutter,\n        underConstruction: options.responsive\n      },\n      brickContainer: brickContainer\n    };\n    build(mason.options);\n  }\n};\n\nlet build = function(options) {\n\n\t//  get each brick\n\tlet bricks = [];\n\tfor (let brickIndex = 0; brickIndex < mason.brickContainer.children.length; brickIndex++) {\n\t\tlet classNames = mason.brickContainer.children[brickIndex].className.split(' ');\n\t\tif (classNames.indexOf('brick') > -1) {\n\t\t\tmason.brickContainer.children[brickIndex].style.width = options.brickWidth + 'px';\n\t\t\tbricks.push(mason.brickContainer.children[brickIndex]);\n\t\t}\n\t}\n\n\tlet grossWidth = options.brickWidth + options.horizontalGutter;\n\n\t//\tcalculate the number of bricks in each row\n\tlet bricksPerRow = Math.floor(parseInt(mason.brickContainer.clientWidth) / grossWidth);\n\n\t//\tinitialise array to keep track of column height\n\tlet columnHeight = Array(bricksPerRow).fill(0);\n\n\t//\tpopulate first row starting with first (0th) brick\n\tlet brickIndex = 0;\n\tfor (let column = 0; column < bricksPerRow; column++) {\n\t\tif (brickIndex < bricks.length) {\n\t\t\t//\tset coordinates for brick\n\t\t\tbricks[brickIndex].style.left = column * grossWidth + 'px';\n\t\t\tbricks[brickIndex].style.top = '0px';\n\t\t\t//\tupdate the height of the column just appended\n\t\t\tcolumnHeight[column] = bricks[brickIndex].offsetHeight;\n\t\t\tbrickIndex++;\n\t\t}\n\t}\n\n\t//\tplace remaining bricks\n\twhile (brickIndex < bricks.length) {\n\t\t//\tget shortest column\n\tlet minColumnValue = Math.min.apply(Math, columnHeight);\n\tlet minColumnKey;\n\tfor (let column = 0; column < bricksPerRow; column++) {\n\t\t//\tfind the key for the minimum value\n\t\tif (columnHeight[column] === minColumnValue) {\n\t\t\tminColumnKey = column;\n\t\t\t//\tuse the leftmost in case several columns have the same height\n\t\t\tbreak;\n\t\t}\n\t}\n\n  let tmpValues = [];\n  console.log(bricks[1].style);\n  console.log(bricks[bricks.length-1].getBoundingClientRect());\n  for(let ind = 0; ind < bricks.length; ind++) {\n    tmpValues.push(bricks[ind].getBoundingClientRect().top);\n  }\n\n  console.log(tmpValues);\n\n  let computedHeight = 0;\n  for (let item = 0; item < bricks.length; item++ ) {\n    if(parseInt(bricks[item].style.top) > 0) {\n       computedHeight += parseInt(bricks[item].style.top);\n    }\n    else {\n      computedHeight = Math.max.apply(Math, tmpValues);\n    }\n  }\n  console.log()\n  brickContainer.style.height = computedHeight + 'px';\n  console.log(computedHeight);\n  computedHeight = 0;\n\n\t//\tset coordinates for brick\n\tbricks[brickIndex].style.left = minColumnKey * grossWidth + 'px';\n\tbricks[brickIndex].style.top = columnHeight[minColumnKey] + options.verticalGutter + 'px';\n\t//\tupdate the height of the column just appended\n\tcolumnHeight[minColumnKey] += bricks[brickIndex].offsetHeight + options.verticalGutter;\n\tbrickIndex++;\n\n\t}\n}\n\n//\tif browser is resized\nwindow.onresize = function() {\n\t//\tif masonry is not disabled\n\tif (mason.options.underConstruction) {\n\n\t\tlet widthBefore = mason.brickContainer.clientWidth;\t\t\t//\tget width before resizing\n\t\t//\tif already called within last second, reset timer\n\t\tif (waitingForResize) {\n\t\t\tclearTimeout(waitingForResize);\n\t\t}\n\t\tlet waitingForResize = setTimeout(function() {\n\t\t\t//\tif container width has changed in the last second\n\t\t\tif (widthBefore !== mason.brickContainer.clientWidth) {\n\t\t\t\tbuild(mason.options);\n\t\t\t}\n\t\t}, 200);\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/pureMasonry.js"],"sourceRoot":""}